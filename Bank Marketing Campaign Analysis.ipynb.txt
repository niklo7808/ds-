{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem Statement\n",
    "\n",
    "### Business Use Case\n",
    "\n",
    "There has been a revenue decline for a Portuguese bank and they would like to know what actions to take. After investigation, they found out that the root cause is that their clients are not depositing as frequently as before. Knowing that term deposits allow banks to hold onto a deposit for a specific amount of time, so banks can invest in higher gain financial products to make a profit. In addition, banks also hold better chance to persuade term deposit clients into buying other products such as funds or insurance to further increase their revenues. As a result, the Portuguese bank would like to identify existing clients that have higher chance to subscribe for a term deposit and focus marketing efforts on such clients.\n",
    "\n",
    "### Data Science Problem Statement\n",
    "\n",
    "Predict if the client will subscribe to a term deposit based on the analysis of the marketing campaigns the bank performed.\n",
    "\n",
    "### Evaluation Metric\n",
    "We will be using [roc_auc_score](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_auc_score.html) for evaluation. \n",
    "\n",
    "### Objective of this notebook\n",
    "\n",
    "The main objective of this notebook is to take you through the entire working pipeline of a typical data science workflow while solving a problem. \n",
    "\n",
    "We will be writing modular code in form of functions, the major advantages of this are\n",
    "- Functions are reusable and at a later stage, the same task can be performed again by just importing the function without explicitly having to write the same piece of code again. \n",
    "- This can save a good amount of time not only at work places but also at hackathons.\n",
    "- So make sure you assemble all your lines of code within a function.\n",
    "\n",
    "__The tasks performed below should serve as a good guide regarding the steps that you should go about while solving a problem. But kindly do not restrict yourself to only the tasks that have been performed in this notebook and feel free to bring your ideas,skills and strategies and implement them as well.__\n",
    "\n",
    "\n",
    "### Word of caution\n",
    "\n",
    "This template is just an example of a data-science pipeline, every data science problem is unique and there are multiple ways to tackle them. Go through this template and try to leverage the information in this while solving your hackathon problems but you may not be able to use all the functions created here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Understanding the dataset\n",
    "\n",
    "**Data Set Information**\n",
    "\n",
    "The data is related to direct marketing campaigns of a Portuguese banking institution. The marketing campaigns were based on phone calls. Often, more than one contact to the same client was required, in order to access if the product (bank term deposit) would be subscribed ('yes') or not ('no') subscribed.\n",
    "\n",
    "There are two datasets:\n",
    "`train.csv` with all examples (32950) and 21 inputs including the target feature, ordered by date (from May 2008 to November 2010), very close to the data analyzed in [Moro et al., 2014]\n",
    "\n",
    "`test.csv` which is the test data that consists  of 8238 observations and 20 features without the target feature\n",
    "\n",
    "Goal:- The classification goal is to predict if the client will subscribe (yes/no) a term deposit (variable y).\n",
    "\n",
    "**Features**\n",
    "\n",
    "|Feature|Feature_Type|Description|\n",
    "|-----|-----|-----|\n",
    "|age|numeric|age of a person|  \n",
    "|job |Categorigol,nominal|type of job ('admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')|  \n",
    "|marital|categorical,nominal|marital status ('divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)|  \n",
    "|education|categorical,nominal| ('basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown') | \n",
    "|default|categorical,nominal| has credit in default? ('no','yes','unknown')|  \n",
    "|housing|categorical,nominal| has housing loan? ('no','yes','unknown')|  \n",
    "|loan|categorical,nominal| has personal loan? ('no','yes','unknown')|  \n",
    "|contact|categorical,nominal| contact communication type ('cellular','telephone')|  \n",
    "|month|categorical,ordinal| last contact month of year ('jan', 'feb', 'mar', ..., 'nov', 'dec')| \n",
    "|day_of_week|categorical,ordinal| last contact day of the week ('mon','tue','wed','thu','fri')|  \n",
    "|duration|numeric| last contact duration, in seconds . Important note: this attribute highly affects the output target (e.g., if duration=0 then y='no')|\n",
    "|campaign|numeric|number of contacts performed during this campaign and for this client (includes last contact)|  \n",
    "|pdays|numeric| number of days that passed by after the client was last contacted from a previous campaign (999 means client was not previously contacted)|  \n",
    "|previous|numeric| number of contacts performed before this campaign and for this client|  \n",
    "|poutcome|categorical,nominal| outcome of the previous marketing campaign ('failure','nonexistent','success')|  \n",
    "|emp.var.rate|numeric|employment variation rate - quarterly indicator|  \n",
    "|cons.price.idx|numeric| consumer price index - monthly indicator|  \n",
    "|cons.conf.idx|numeric| consumer confidence index - monthly indicator|  \n",
    "|euribor3m|numeric|euribor 3 month rate - daily indicator|\n",
    "|nr.employed|numeric| number of employees - quarterly indicator|   \n",
    "\n",
    "**Target variable (desired output):**  \n",
    "\n",
    "|Feature|Feature_Type|Description|\n",
    "|-----|-----|-----|\n",
    "|y | binary| has the client subscribed a term deposit? ('yes','no')|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Importing necessary libraries\n",
    "\n",
    "The following code is written in Python 3.x. Libraries provide pre-written functionality to perform necessary tasks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loading Data Modelling Libraries\n",
    "\n",
    "We will use the popular scikit-learn library to develop our machine learning algorithms. In sklearn, algorithms are called Estimators and implemented in their own classes. For data visualization, we will use the matplotlib and seaborn library. Below are common classes to load."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from sklearn.preprocessing import LabelEncoder,MinMaxScaler,StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier ,RandomForestClassifier ,GradientBoostingClassifier\n",
    "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n",
    "from sklearn.linear_model import Ridge,Lasso\n",
    "from sklearn.metrics import roc_auc_score ,mean_squared_error,accuracy_score,classification_report,roc_curve,confusion_matrix\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from xgboost import XGBClassifier \n",
    "from scipy.stats.mstats import winsorize\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.model_selection import train_test_split\n",
    "pd.set_option('display.max_columns',None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Loading and Cleaning\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load and Prepare dataset\n",
    "\n",
    "- In this task, we'll load the dataframe in pandas, drop the unnecessary columns and display the top five rows of the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>month</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>emp.var.rate</th>\n",
       "      <th>cons.price.idx</th>\n",
       "      <th>cons.conf.idx</th>\n",
       "      <th>euribor3m</th>\n",
       "      <th>nr.employed</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>49</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.9y</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>nov</td>\n",
       "      <td>wed</td>\n",
       "      <td>227</td>\n",
       "      <td>4</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>93.200</td>\n",
       "      <td>-42.0</td>\n",
       "      <td>4.120</td>\n",
       "      <td>5195.8</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>married</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>nov</td>\n",
       "      <td>wed</td>\n",
       "      <td>202</td>\n",
       "      <td>2</td>\n",
       "      <td>999</td>\n",
       "      <td>1</td>\n",
       "      <td>failure</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>93.200</td>\n",
       "      <td>-42.0</td>\n",
       "      <td>4.120</td>\n",
       "      <td>5195.8</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78</td>\n",
       "      <td>retired</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.4y</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>jul</td>\n",
       "      <td>mon</td>\n",
       "      <td>1148</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>-1.7</td>\n",
       "      <td>94.215</td>\n",
       "      <td>-40.3</td>\n",
       "      <td>0.870</td>\n",
       "      <td>4991.6</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>may</td>\n",
       "      <td>mon</td>\n",
       "      <td>120</td>\n",
       "      <td>2</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.1</td>\n",
       "      <td>93.994</td>\n",
       "      <td>-36.4</td>\n",
       "      <td>4.857</td>\n",
       "      <td>5191.0</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>59</td>\n",
       "      <td>retired</td>\n",
       "      <td>divorced</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>jun</td>\n",
       "      <td>tue</td>\n",
       "      <td>368</td>\n",
       "      <td>2</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>-2.9</td>\n",
       "      <td>92.963</td>\n",
       "      <td>-40.8</td>\n",
       "      <td>1.262</td>\n",
       "      <td>5076.2</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age           job   marital          education  default housing loan  \\\n",
       "0   49   blue-collar   married           basic.9y  unknown      no   no   \n",
       "1   37  entrepreneur   married  university.degree       no      no   no   \n",
       "2   78       retired   married           basic.4y       no      no   no   \n",
       "3   36        admin.   married  university.degree       no     yes   no   \n",
       "4   59       retired  divorced  university.degree       no      no   no   \n",
       "\n",
       "     contact month day_of_week  duration  campaign  pdays  previous  \\\n",
       "0   cellular   nov         wed       227         4    999         0   \n",
       "1  telephone   nov         wed       202         2    999         1   \n",
       "2   cellular   jul         mon      1148         1    999         0   \n",
       "3  telephone   may         mon       120         2    999         0   \n",
       "4   cellular   jun         tue       368         2    999         0   \n",
       "\n",
       "      poutcome  emp.var.rate  cons.price.idx  cons.conf.idx  euribor3m  \\\n",
       "0  nonexistent          -0.1          93.200          -42.0      4.120   \n",
       "1      failure          -0.1          93.200          -42.0      4.120   \n",
       "2  nonexistent          -1.7          94.215          -40.3      0.870   \n",
       "3  nonexistent           1.1          93.994          -36.4      4.857   \n",
       "4  nonexistent          -2.9          92.963          -40.8      1.262   \n",
       "\n",
       "   nr.employed    y  \n",
       "0       5195.8   no  \n",
       "1       5195.8   no  \n",
       "2       4991.6  yes  \n",
       "3       5191.0   no  \n",
       "4       5076.2   no  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "path = 'train.csv'\n",
    "# Load the dataframe\n",
    "dataframe = pd.read_csv(path,delimiter=',')\n",
    "\n",
    "# Remove the Id column from the dataset\n",
    "\n",
    "dataframe.drop('Id',axis=1,inplace=True)\n",
    "dataframe.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check Numeric and Categorical Features\n",
    "\n",
    "If you are familiar with machine learning, you will know that a dataset consists of numerical and categorical columns.\n",
    "\n",
    "Looking at the dataset, we think we can identify the categorical and continuous columns in it. Right? But it might also be possible that the numerical values are represented as strings in some feature. Or the categorical values in some features might be represented as some other datatypes instead of strings. Hence it's good to check for the datatypes of all the features.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   age  duration  campaign  pdays  previous  emp.var.rate  cons.price.idx  \\\n",
      "0   49       227         4    999         0          -0.1          93.200   \n",
      "1   37       202         2    999         1          -0.1          93.200   \n",
      "2   78      1148         1    999         0          -1.7          94.215   \n",
      "3   36       120         2    999         0           1.1          93.994   \n",
      "4   59       368         2    999         0          -2.9          92.963   \n",
      "\n",
      "   cons.conf.idx  euribor3m  nr.employed  \n",
      "0          -42.0      4.120       5195.8  \n",
      "1          -42.0      4.120       5195.8  \n",
      "2          -40.3      0.870       4991.6  \n",
      "3          -36.4      4.857       5191.0  \n",
      "4          -40.8      1.262       5076.2  \n",
      "================================================================================\n",
      "Categorical Features:\n",
      "            job   marital          education  default housing loan    contact  \\\n",
      "0   blue-collar   married           basic.9y  unknown      no   no   cellular   \n",
      "1  entrepreneur   married  university.degree       no      no   no  telephone   \n",
      "2       retired   married           basic.4y       no      no   no   cellular   \n",
      "3        admin.   married  university.degree       no     yes   no  telephone   \n",
      "4       retired  divorced  university.degree       no      no   no   cellular   \n",
      "\n",
      "  month day_of_week     poutcome    y  \n",
      "0   nov         wed  nonexistent   no  \n",
      "1   nov         wed      failure   no  \n",
      "2   jul         mon  nonexistent  yes  \n",
      "3   may         mon  nonexistent   no  \n",
      "4   jun         tue  nonexistent   no  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "age                 int64\n",
       "job                object\n",
       "marital            object\n",
       "education          object\n",
       "default            object\n",
       "housing            object\n",
       "loan               object\n",
       "contact            object\n",
       "month              object\n",
       "day_of_week        object\n",
       "duration            int64\n",
       "campaign            int64\n",
       "pdays               int64\n",
       "previous            int64\n",
       "poutcome           object\n",
       "emp.var.rate      float64\n",
       "cons.price.idx    float64\n",
       "cons.conf.idx     float64\n",
       "euribor3m         float64\n",
       "nr.employed       float64\n",
       "y                  object\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Function to identify numeric features\n",
    "def numeric_features(dataset):\n",
    "    numeric_col = dataset.select_dtypes(include=np.number).columns.tolist()\n",
    "    return dataset[numeric_col].head()\n",
    "    \n",
    "numeric_columns = numeric_features(dataframe)\n",
    "print(numeric_columns)\n",
    "\n",
    "print(\"====\"*20)\n",
    "\n",
    "\n",
    "\n",
    "# Function to identify categorical features\n",
    "def categorical_features(dataset):\n",
    "    categorical_col = dataset.select_dtypes(exclude=np.number).columns.tolist()\n",
    "    return dataset[categorical_col].head()\n",
    "\n",
    "categorical_columns = categorical_features(dataframe)\n",
    "print(\"Categorical Features:\")\n",
    "print(categorical_columns)\n",
    "\n",
    "\n",
    "# Function to check the datatypes of all the columns:\n",
    "def check_datatypes(dataset):\n",
    "    return dataset.dtypes\n",
    "\n",
    "\n",
    "check_datatypes(dataframe)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check Missing Data \n",
    "\n",
    "One of the main steps in data preprocessing is handling missing data. Missing data means absence of observations in columns that can be caused while procuring the data, lack of information, incomplete results etc. Feeding missing data to your machine learning model could lead to wrong prediction or classification. Hence it is necessary to identify missing values and treat them.\n",
    "\n",
    "- In the function below, we calculate the total missing values and the percentage of missing values in every feature of the dataset.\n",
    "- The function ideally returns a dataframe consisting of the feature names as index and two columns having the count and percentage of missing values in that feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                Total  Percent\n",
      "y                   0      0.0\n",
      "day_of_week         0      0.0\n",
      "job                 0      0.0\n",
      "marital             0      0.0\n",
      "education           0      0.0\n",
      "default             0      0.0\n",
      "housing             0      0.0\n",
      "loan                0      0.0\n",
      "contact             0      0.0\n",
      "month               0      0.0\n",
      "duration            0      0.0\n",
      "nr.employed         0      0.0\n",
      "campaign            0      0.0\n",
      "pdays               0      0.0\n",
      "previous            0      0.0\n",
      "poutcome            0      0.0\n",
      "emp.var.rate        0      0.0\n",
      "cons.price.idx      0      0.0\n",
      "cons.conf.idx       0      0.0\n",
      "euribor3m           0      0.0\n",
      "age                 0      0.0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Function to identify the number of missing values in every feature\n",
    "def missing_data(dataset):\n",
    "    total = dataset.isnull().sum().sort_values(ascending=False)\n",
    "    percent = (dataset.isnull().sum()/dataset.isnull().count()).sort_values(ascending=False)\n",
    "    missing_data = pd.concat([total,percent],axis=1, keys=['Total','Percent'])\n",
    "    return missing_data\n",
    "    \n",
    "    \n",
    "missing_data = missing_data(dataframe)\n",
    "print(missing_data)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dropping missing values\n",
    "\n",
    "The given dataset is a pretty clean dataset. But this might not be the case always as you can often encounter missing values represented as `NaN` values  in the data. \n",
    "\n",
    "There are two methods of dealing with missing data \n",
    "- Dropping them\n",
    "- Imputing them.\n",
    "\n",
    "Depending on the case we can allow a specific proportion of missing values, beyond which we might want to drop the variable from analysis.\n",
    "\n",
    "This varies from case to case on the amount of information you think the variable has. For example, if you are working on some dataset which contains a column for date of marriage. It may be blank for 50% (or even more) of the population, but might have very high information about the lifestyle of the person. In such cases, you would still use the variable.\n",
    "\n",
    "If the information contained in the variable is not that high, you can drop the variable if it has more than 50% missing values. There are projects / models where imputation of even 20 - 30% missing values provided better results - the famous Titanic dataset on Kaggle being one such case. Age is missing in ~20% of cases, but you benefit by imputing them rather than ignoring the variable.\n",
    "\n",
    "- Now you have the number and percentage of missing values in every feature, from the previous function. \n",
    "- Using this information, you can decide as to what proportion of missing values you should remove from every feature.\n",
    "- The function below takes a threshold value of your choice and removes the features having missing value percentage greater than this threshold. The function can take three parameters - the dataframe, missing data dataframe and threshold value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y                 0\n",
      "day_of_week       0\n",
      "job               0\n",
      "marital           0\n",
      "education         0\n",
      "default           0\n",
      "housing           0\n",
      "loan              0\n",
      "contact           0\n",
      "month             0\n",
      "duration          0\n",
      "nr.employed       0\n",
      "campaign          0\n",
      "pdays             0\n",
      "previous          0\n",
      "poutcome          0\n",
      "emp.var.rate      0\n",
      "cons.price.idx    0\n",
      "cons.conf.idx     0\n",
      "euribor3m         0\n",
      "age               0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Function to drop missing values\n",
    "def drop_missing(dataset, missing,value):\n",
    "    dataset = dataset.drop((missing[missing['Percent'] > value]).index, axis=1)\n",
    "    print(dataset.isnull().sum().sort_values(ascending=False))\n",
    "    return dataset\n",
    "    \n",
    "    \n",
    "dataframe = drop_missing(dataframe,missing_data,0.60)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fill null values in continuous features\n",
    "\n",
    "There are no null values in any of the continuous columns in this dataset. But when null values exist in a continuous column, a good approach would be to impute them.\n",
    "\n",
    "There exists many approach to missing-data imputation and they usually depend on your problem and how your data algorithm behaves. If the features are numeric you can use simple approaches, such as average values and sampling from the feature distribution.\n",
    "\n",
    "- Missing values in continuous data are mostly imputed using mean or median. What to choose depends on a lot of factors and is to be decided by you\n",
    "- Let's write a function that will take the dataframe and the impute missing data with either mean or mode, depending on the user's choice.\n",
    "    - For this, we define a parameter that can take only two values 0 or 1.\n",
    "    - If you specify 0 - missing values are imputed with *mean*\n",
    "    - If you specify 1 - missing values are imputed with *median*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "age               0\n",
      "job               0\n",
      "marital           0\n",
      "education         0\n",
      "default           0\n",
      "housing           0\n",
      "loan              0\n",
      "contact           0\n",
      "month             0\n",
      "day_of_week       0\n",
      "duration          0\n",
      "campaign          0\n",
      "pdays             0\n",
      "previous          0\n",
      "poutcome          0\n",
      "emp.var.rate      0\n",
      "cons.price.idx    0\n",
      "cons.conf.idx     0\n",
      "euribor3m         0\n",
      "nr.employed       0\n",
      "y                 0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Function to impute missing values with mean or median\n",
    "def fill_null_values(dataset, value):\n",
    "    nulls = pd.DataFrame(dataset.isnull().sum().sort_values(ascending=False))\n",
    "    nulls = nulls[nulls>0]\n",
    "    nulls.columns = ['Null Count']\n",
    "    nulls.index.name = 'Feature'\n",
    "    \n",
    "\n",
    "    for column in nulls[nulls[\"Null Count\"]> 0].index:\n",
    "        if dataset[column].dtype == np.number and value == 0:\n",
    "            dataset[column].fillna(dataset[column].mean(), inplace = True)\n",
    "        elif value == 1:\n",
    "            dataset[column].fillna(dataset[column].median(), inplace = True)\n",
    "        else:\n",
    "            dataset[column].fillna(\"NA\", inplace = True)\n",
    "    print(dataset.isnull().sum())\n",
    "    return dataset\n",
    "\n",
    "dataframe=fill_null_values(dataframe,0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check for Class Imbalance\n",
    "\n",
    "Class imbalance occurs when the observations belonging to one class in the target are significantly higher than the other class or classes. A class distribution of **80:20 or greater** is typically considered as an imbalance for a binary classification. \n",
    "\n",
    "Since most machine learning algorithms assume that data is equally distributed, applying them on imbalanced data often results in bias towards majority classes and poor classification of minority classes. Hence we need to identify & deal with class imbalance. \n",
    "\n",
    "Let's write a function below that takes the target variable and outputs the distribution of classes in the target."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "no     88.734446\n",
       "yes    11.265554\n",
       "Name: y, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def class_imbalance(target):\n",
    "    class_values = (target.value_counts()/target.value_counts().sum())*100\n",
    "    return class_values\n",
    "\n",
    "class_imbalance(dataframe['y'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Observations : \n",
    "- The class distribution in the target is ~89:11. This is a clear indication of imbalance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Detect outliers in the continuous columns\n",
    "\n",
    "Outliers are observations that lie far away from majority of observations in the dataset and can be represented mathematically in different ways.\n",
    "\n",
    "One method of defining outliers are: outliers are data points lying beyond **(third quartile + 1.5xIQR)** and below **(first quartile - 1.5xIQR)**. \n",
    "\n",
    "- The function below takes a dataframe and outputs the number of outliers in every numeric feature based on the above rule of *IQR* \n",
    "\n",
    "You can even modify the function below to capture the outliers as per their other definitions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Number of Outliers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>age</td>\n",
       "      <td>368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>duration</td>\n",
       "      <td>2366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>campaign</td>\n",
       "      <td>1916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>pdays</td>\n",
       "      <td>1226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>previous</td>\n",
       "      <td>4534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>emp.var.rate</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cons.price.idx</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cons.conf.idx</td>\n",
       "      <td>359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>euribor3m</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>nr.employed</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Feature Number of Outliers\n",
       "0             age                368\n",
       "1        duration               2366\n",
       "2        campaign               1916\n",
       "3           pdays               1226\n",
       "4        previous               4534\n",
       "5    emp.var.rate                  0\n",
       "6  cons.price.idx                  0\n",
       "7   cons.conf.idx                359\n",
       "8       euribor3m                  0\n",
       "9     nr.employed                  0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Function to detect outliers in every feature\n",
    "def detect_outliers(dataframe):\n",
    "    cols = list(dataframe)\n",
    "    outliers = pd.DataFrame(columns = ['Feature', 'Number of Outliers'])\n",
    "    for column in cols:\n",
    "        if column in dataframe.select_dtypes(include=np.number).columns:\n",
    "            q1 = dataframe[column].quantile(0.25)\n",
    "            q3 = dataframe[column].quantile(0.75)\n",
    "            iqr = q3 - q1\n",
    "            fence_low = q1 - (1.5*iqr)\n",
    "            fence_high = q3 + (1.5*iqr)\n",
    "            outliers = outliers.append({'Feature':column, 'Number of Outliers':dataframe.loc[(dataframe[column] < fence_low) | (dataframe[column] > fence_high)].shape[0]},ignore_index=True)\n",
    "    return outliers\n",
    "\n",
    "detect_outliers(dataframe)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Observations :\n",
    "- As per the IQR methodology, there are outliers in majority of the columns.\n",
    "- In the further steps below, we will see how to deal with the outliers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA & Data Visualizations\n",
    "\n",
    "Exploratory data analysis is an approach to analyzing data sets by summarizing their main characteristics with visualizations. The EDA process is a crucial step prior to building a model in order to unravel various insights that later become important in developing a robust algorithmic model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Univariate analysis of Categorical columns\n",
    "\n",
    "Univariate analysis means analysis of a single variable. It’s mainly describes the characteristics of the variable.\n",
    "\n",
    "If the variable is categorical we can use either a bar chart or a pie chart to find the distribution of the classes in the variable.\n",
    "\n",
    "- It can get a little tedious (and boring!) to write the same piece of code for analysing the frequency of categorical variables. So why not write a single function for it and just call it whenever required.\n",
    "- The function plots the frequency of all the values in the categorical variables. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Function to perform univariate analysis of categorical columns\n",
    "def plot_categorical_columns(dataframe):\n",
    "    categorical_columns = dataframe.select_dtypes(include=['object']).columns\n",
    "    \n",
    "    for i in range(0,len(categorical_columns),2):\n",
    "            if len(categorical_columns) > i+1:\n",
    "                \n",
    "                plt.figure(figsize=(10,4))\n",
    "                plt.subplot(121)\n",
    "                dataframe[categorical_columns[i]].value_counts(normalize=True).plot(kind='bar')\n",
    "                plt.title(categorical_columns[i])\n",
    "                plt.subplot(122)     \n",
    "                dataframe[categorical_columns[i+1]].value_counts(normalize=True).plot(kind='bar')\n",
    "                plt.title(categorical_columns[i+1])\n",
    "                plt.tight_layout()\n",
    "                plt.show()\n",
    "\n",
    "            else:\n",
    "                dataframe[categorical_columns[i]].value_counts(normalize=True).plot(kind='bar')\n",
    "                plt.title(categorical_columns[i])\n",
    "        \n",
    "        \n",
    "plot = plot_categorical_columns(dataframe)      \n",
    "        \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Observations :\n",
    "\n",
    "From the above visuals, we can make the following observations: \n",
    "- The top three professions that our customers belong to are - administration, blue-collar jobs and technicians.\n",
    "- A huge number of the customers are married.\n",
    "- Majority of the customers do not have a credit in default\n",
    "- Many of our past customers have applied for a housing loan but very few have applied for personal loans.\n",
    "- Cell-phones seem to be the most favoured method of reaching out to customers.\n",
    "- Many customers have been contacted in the month of **May**.\n",
    "- The plot for the target variable shows heavy imbalance in the target variable. \n",
    "- The missing values in some columns have been represented as `unknown`. `unknown` represents missing data. In the next task, we will treat these values.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imputing `unknown` values of categorical columns \n",
    "\n",
    "In the previous task we have seen some categorical variables have a value called `unknown`. `unknown` values are a kind of missing data.\n",
    "Depending on the use case, we can decide how to deal with these values. One method is to directly impute them with the mode value of respective columns.\n",
    "\n",
    "- The function below imputes the value `unknown` in the categorical columns with the mode value of that column. You can modify this function to replace any unwanted value(for e.g `NaN` value) in a column with a value of your choice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Impute mising values of categorical data with mode\n",
    "def impute_mode(dataframe):\n",
    "    cols = list(dataframe)\n",
    "    for col in cols:\n",
    "        if col in dataframe.select_dtypes(exclude=np.number).columns:\n",
    "            dataframe[col]=dataframe[col].str.replace('unknown',dataframe[col].mode()[0])\n",
    "    return dataframe\n",
    "\n",
    "dataframe = impute_mode(dataframe)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Univariate analysis of Continuous columns\n",
    "Just like for categorical columns, by performing a univariate analysis on the continuous columns, we can get a sense of the distrbution of values in every column and of the outliers in the data. Histograms are great for plotting the distribution of the data and boxplots are the best choice for visualizing outliers. \n",
    "\n",
    "- Let's construct two functions, one that plots a histogram of all the continuous features and other that plots a boxplot of the same."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAsgAAAEYCAYAAABBfQDEAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAATO0lEQVR4nO3df9Bld10f8PdndyNZ+SFJE1LcIAsuVLBShIhgpEZMAZFBrTClgzVUpzaMbtPRGQ3W8Qd2Oo1WK0YdpAiB8WdEwRShJK2C7UyRJBDYxCTyGEFYaBKIEmiWhGS//nHPmg/L8+zm2ezz3Huf5/WaubNnzz3n3O/n3Hu/9/2c87331BgjAADAzI55NwAAABaJgAwAAI2ADAAAjYAMAACNgAwAAM2u9Sx8xhlnjL17925QUwC2j2uvvfaTY4wz17uefhjg5FmrL15XQN67d2+uueaak9cqgG2qqj5yIuvphwFOnrX6YkMsAACgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoNk17wYsk0svvTQrKyvzbgZwEh08eDBJsmfPnjWX2bdvX/bv379ZTYItxWfncnkgfeIi2aj+WUBeh5WVlVx3/Y2570tPn3dTgJNk512fTpL8v7tX7w533nXHZjYHthyfncvleH3iItnI/nnxq18w933p6Tn0VS+YdzOAk2T3TW9PkjXf10fuB06cz87lcbw+cZFsZP9sDDIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANAIyAAA0AjIAADQCMgAANLs240EuvfTSJMn+/fs34+EANtwy9mvL2GaAtez43J05ePDeDdn2pgTklZWVzXgYgE2zjP3aMrYZYC11+PM5dOjQhmzbEAsAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABoBGQAAGgEZAAAaARkAABodm3Ggxw8eDCHDh3KRRddtBkPt2FWVlay454x72YAm2jH5+7Myspnvqj/WllZye7du+fUqhOzVfpilovPTpbRcY8gV9X3V9U1VXXN7bffvhltAqDRDwNsruMeQR5jvDbJa5PknHPOOaE/Affs2ZMkefWrX30iqy+Miy66KNfecuu8mwFsosOnPiL7Hn/WF/Vfm3kU9mT0w8nW6YtZLj47WUbGIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAEAjIAMAQCMgAwBAIyADAECzazMeZN++fZvxMACbZhn7tWVsM8Baxo5Tsnv37g3Z9qYE5P3792/GwwBsmmXs15axzQBrOXzqI7Jnz1kbsm1DLAAAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCgEZABAKARkAEAoBGQAQCg2TXvBiybnXfdkd03vX3ezQBOkp13fSpJ1nxf77zrjiRnbWKLYOvx2bk8jtcnLpKN7J8F5HXYt2/fvJsAnGQHD96bJNmzZ61O9izvfXgQvH+Wy/H7xEWycf2zgLwO+/fvn3cTAGCp+OxkGRmDDAAAjYAMAACNgAwAAI2ADAAAjYAMAACNgAwAAI2ADAAAjYAMAACNgAwAAI2ADAAAjYAMAACNgAwAAI2ADAAAjYAMAACNgAwAAI2ADAAAjYAMAACNgAwAAI2ADAAAjYAMAACNgAwAAI2ADAAATY0xHvjCVbcn+cjGNeekOCPJJ+fdiAVkv6zOflmd/bK6k7lfHjvGOHO9Ky1JP3wybKfX4HapdbvUmWyfWrdCnav2xesKyMugqq4ZY5wz73YsGvtldfbL6uyX1dkvm2c77evtUut2qTPZPrVu5ToNsQAAgEZABgCAZisG5NfOuwELyn5Znf2yOvtldfbL5tlO+3q71Lpd6ky2T61bts4tNwYZAAAejK14BBkAAE6YgAwAAM2WCchV9fqquq2qrp93WxZJVT2mqv6kqm6sqhuq6qJ5t2kRVNWpVfXeqvrAtF9+et5tWiRVtbOq3l9Vb5t3WxZFVX24qg5U1XVVdc2827OsVtuPVXV6VV1VVR+a/j1tml9V9UtVtVJVH6yqp7XtXDAt/6GqumBe9axlnXWeV1Wfnpa9rqp+om3n+VV187QPLp5XPWtZo86XTP3q4ao656jlXznVcnNVPa/NX+g6k/XVWlV7q+pQe05f0+57+rSdlen1XfOoZy1r1PlzVXXT9D58S1U9si2/tM/pMY0xtsQtyT9N8rQk18+7LYt0S/LoJE+bph+e5C+SPHne7Zr3LUkledg0fUqSP0vyzHm3a1FuSX4oyW8ledu827IotyQfTnLGvNux7LfV9mOSn01y8TR9cZJLpukXJHnH9H59ZpI/m+afnuSW6d/TpunT5l3bg6jzvNXea0l2JvnLJI9P8iVJPrBo/fcadT4pyT9K8q4k57T5T55qeEiSx0217VyGOk+g1r1r5ZEk703yrOl1/Y4k3zrv2h5Anc9NsmuavqS9dpf6OT3WbcscQR5j/GmSO+bdjkUzxvjEGON90/RnktyYZM98WzV/Y+az039PmW6+sZqkqs5O8m1JXjfvtrBtfHuSN07Tb0zyHW3+m6b363uSPLKqHp3keUmuGmPcMcb4myRXJXn+Zjf6BKxV51qekWRljHHLGOOeJL8zbWOhjTFuHGPcvMpd357kd8YYd48x/irJSmY1LmWdyTFrXdX0+n3EGOP/jlnCfFOO/zqYuzHGlWOMe6f/vifJ2dP0lntOj9gyAZnjq6q9Sb42s6Ol2940jOC6JLdl9mFrv8z8YpIfSXJ43g1ZMCPJlVV1bVV9/7wbs8RW249njTE+kcz+qE/yqGn+niQfbet+bJq31vxFsp46k+RZ05Cvd1TVV0/zlrXOtSzz85msvw943DRU7d1V9exp3p7M6jtiEWs9Xp3fm9mR72T5n9M17Zp3A9gcVfWwJL+f5N+PMe6cd3sWwRjjviRPncZSvaWq/vEYY1uPYa+qFya5bYxxbVWdN+/2LJhzxxgfr6pHJbmqqm6azlyxPl+0H4+x7GpjM8cx5i+S9dT5viSPHWN8tqpekOStSZ6QJa3zGO+LtepZ7WDdotWZrK/WTyT5ijHGp6rq6UneOv3hs9TPaVX9hyT3JvnNadllf07X5AjyNlBVp2QWjn9zjPEH827Pohlj/G1m48eW4RTtRjs3yYuq6sOZnRJ7TlX9xnybtBjGGB+f/r0tyVsyO4XIOq2xH2+dTj0fOQV927T4x5I8pq1+dpKPH2P+wlhPnWOMO48M+RpjvD3JKVV1Rpa3zrUs7fOZrK/WacjBp6bpazMbj/vEzGo9uy26cLWuVef0ZdgXJnnZNDwkWfLn9FgE5C1u+nbsrye5cYzxC/Nuz6KoqjOPfAu3qnYnOT/JsY7wbAtjjFeOMc4eY+xN8tIkfzzG+O45N2vuquqhVfXwI9OZfWFlW59tOBHH2I9XJDnySxQXJPnDafqKJN9TM89M8ulpaMI7kzy3qk6r2S9BPHeatxDWW2dV/cMjv2RQVc/I7LP5U0muTvKEqnpcVX1JZu/JKzazlmM5gffFFUleWlUPqarHZXaU/L1Z8DqT9dc6fcbsnKYfn1mtt0yv389U1TOn5/x7cv/rfe7WqrOqnp/kR5O8aIxxV1tlaZ/T49kyQyyq6rcz+ybwGVX1sSQ/Ocb49fm2aiGcm+RfJTkwjbdNkh+bjlJsZ49O8sapA9uR5PIxhp80Yy1nZTYMJ5n1m781xvgf823SUlp1P1bV1Ukur6rvS/LXSV4yLf/2zH7JYiXJXUn+dZKMMe6oqp/J7EM4SV41xlikL2mvt84XJ3lFVd2b5FCSl05H6O6tqh/MLPzvTPL6McYNm1zLsaxV53cmuTTJmUn+qKquG2M8b4xxQ1VdnuTPMztN/wPTULcseJ3JOmvN7Je1XjU9p/clubC9Rl+R5LIkuzMby/uOLI616lzJ7Jcqrprue88Y48Ilf06PyaWmAQCgMcQCAAAaARkAABoBGQAAGgEZAAAaARkAABoBmaVRVS+qqoun6cuq6sUPYluPnS6jeV1V3VBVF568lgJwtKo6r6o29Oc0q+rD00VW4EHZMr+DzNZWVbvGGFfkJPzQeFXtyuwyoN8wxrh7ugz39VV1xZErCAFsF1P/eu+82wGLxBFkNlVVfXdVvXc6cvtrVbWzqj7b7n9xVV02TV9WVb9QVX+S5JKqenlV/XLb3PlV9b+r6i+q6oXTOqdW1Ruq6kBVvb+qvnma//Kq+r2q+u9Jrhxj3DPGuHvazkPS3gtV9dmqumQ6wvw/q+oZVfWuqrqlql60sXsI4OSpqr1VdWNV/bfpbNmVVbV76tP+U1W9O8lFR62zs6p+rqqurqoPVtW/neafV1XvrqrLp373P1fVy6Y+/UBVfeW03GVV9Zqj++ejHuP0qnrrtP33VNVTqmpHVX2oqs6cltlRVStVdUbNrkz3+1Obrq6qc6dl/sFU0/ur6teS1EbvU7YHAZlNU1VPSvIvkpw7xnhqZlcXetlxVntikvPHGD+8yn17k3xTkm9L8pqqOjXJDyTJGONrkvzLzK6Wd+q0/LOSXDDGeM7UnsdU1QeTfDTJJe3o8UOTvGuM8fQkn0nyH5P8syTfmeRV6y4cYL6ekORXxhhfneRvk3zXNP+RY4xvGmP8/FHLf19ml/X+uiRfl+Tf1OwywknyTzIL1F+T2VVanzjGeEaS1yXZ37axN1/cP3c/neT9Y4ynJPmxJG8aYxxO8hu5/3Ph/CQfGGN8Msmrk/zXqU3fNT1ekvxkkv8zxvjazM4wfsX6dg2szhALNtO3JHl6kqunS1XuTnLbcdb5vSOXrVzF5VOH+qGquiXJVyX5xswu+5kxxk1V9ZHMQnaSXNUvRzvG+GiSp1TVlyd5a1W9eYxxa5J7khy5jPCBJHePMT5fVQcy6/QBlslfjTGum6avzf392O+usfxzM+sbj3zP48syC9n3JLl6jPGJJKmqv0xy5bTMgSTf3LaxWv/cfWOmoD7G+OPpSPCXJXl9kj9M8otJvjfJG6blz0/y5OmzI0keUVUPz+ySzv982s4fVdXfHGdfwAMiILOZKskbxxiv/IKZVf3o8NFHGf7/MbZ39HXSR459em3VbY0xPl5VNyR5dpI3J/n8uP8a7IeT3D0td3gavwywTO5u0/dldnAiWbt/rST7xxjv/IKZVecdta3D7f+H84WZYrX++ejHONoYY3y0qm6tquck+frcfzR5R5JnjTEOHdWm1bYND5ohFmym/5XkxVX1qOTvx6A9NsmtVfWkqtqR2TCGB+ol0xi1r0zy+CQ3J/nTTB1qVT0xs9NtNx+9YlWdXVW7p+nTkpy72nIA29A7k7yiqk5JZn1pVT10ndtYrX/uel99XpJPjjHunO57XWZDLS5vZxCvTPKDR1auqqeusp1vTXLaOtsJq3I0jE0zxvjzqvrxJFdOYfjzmY0ZvjjJ2zIbC3x9koc9wE3enOTdSc5KcuEY43NV9auZjXc7kOTeJC+ffqni6HWflOTnq+rIUef/MsY48OAqBFhO0xeQzxlj/ERmAXVvkvfVrPO8Pcl3rHOTq/XP/f6fSvKG6XsgdyW5oN13RWZDK97Q5v27JL8yLb8rs2B8YWZjmX+7qt43Pd5fr7OdsKq6/0wyAMCDU7NfInrbGOPNJ7j+OZl9Ie/ZJ7VhsA6OIAMAC6FmF4N6RY7/C0ewoRxBBgCAxpf0AACgEZABAKARkAEAoBGQAQCgEZABAKD5O823nFImSkvyAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Function to plot histograms\n",
    "def plot_continuous_columns(dataframe):\n",
    "    numeric_columns = dataframe.select_dtypes(include=['number']).columns.tolist()\n",
    "    dataframe = dataframe[numeric_columns]\n",
    "    \n",
    "    for i in range(0,len(numeric_columns),2):\n",
    "        if len(numeric_columns) > i+1:\n",
    "            plt.figure(figsize=(10,4))\n",
    "            plt.subplot(121)\n",
    "            sns.distplot(dataframe[numeric_columns[i]], kde=False)\n",
    "            plt.subplot(122)            \n",
    "            sns.distplot(dataframe[numeric_columns[i+1]], kde=False)\n",
    "            plt.tight_layout()\n",
    "            plt.show()\n",
    "\n",
    "        else:\n",
    "            sns.distplot(dataframe[numeric_columns[i]], kde=False)\n",
    "\n",
    "# Function to plot boxplots\n",
    "def plot_box_plots(dataframe):\n",
    "    numeric_columns = dataframe.select_dtypes(include=['number']).columns.tolist()\n",
    "    dataframe = dataframe[numeric_columns]\n",
    "    \n",
    "    for i in range(0,len(numeric_columns),2):\n",
    "        if len(numeric_columns) > i+1:\n",
    "            plt.figure(figsize=(10,4))\n",
    "            plt.subplot(121)\n",
    "            sns.boxplot(dataframe[numeric_columns[i]])\n",
    "            plt.subplot(122)            \n",
    "            sns.boxplot(dataframe[numeric_columns[i+1]])\n",
    "            plt.tight_layout()\n",
    "            plt.show()\n",
    "\n",
    "        else:\n",
    "            sns.boxplot(dataframe[numeric_columns[i]])\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "plot_continuous_columns(dataframe)            \n",
    "plot_box_plots(dataframe)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Observation :\n",
    "\n",
    "- As we can see from the histogram, the features `age`, `duration` and `campaign` are heavily skewed and this is due to the presence of outliers as seen in the boxplot for these features. We will deal with these outliers in the steps below.\n",
    "- Looking at the plot for `pdays`, we can infer that majority of the customers were being contacted for the first time because as per the feature description for `pdays` the value 999 indicates that the customer had not been contacted previously. \n",
    "- Since the features `pdays` and `previous` consist majorly only of a single value, their variance is quite less and hence we can drop them since technically will be of no help in prediction."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dropping the columns `pdays` & `previous`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframe.drop(['pdays','previous'],1,inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bivariate Analysis - Categorical Columns\n",
    "\n",
    "Bivariate analysis involves checking the relationship between two variables simultaneously. In the function below, we plot every categorical feature against the target by plotting a barchart. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def bivariate_analysis_categorical(dataframe,target):\n",
    "    categorical_columns = dataframe.select_dtypes(exclude=np.number).columns\n",
    "    for i in range(0,len(categorical_columns),2):\n",
    "        if len(categorical_columns) > i+1:\n",
    "            plt.figure(figsize=(15,5))\n",
    "            plt.subplot(121)\n",
    "            sns.countplot(x=dataframe[categorical_columns[i]],hue=target,data=dataframe)\n",
    "            plt.xticks(rotation=90)\n",
    "            plt.subplot(122)            \n",
    "            sns.countplot(dataframe[categorical_columns[i+1]],hue=target,data=dataframe)\n",
    "            plt.xticks(rotation=90)\n",
    "            plt.tight_layout()\n",
    "            plt.show()\n",
    "\n",
    "\n",
    "bivariate_analysis_categorical(dataframe,dataframe['y'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Observations:\n",
    "\n",
    "- The common traits seen for customers who have subscribed for the term deposit are :\n",
    "    - Customers having administrative jobs form the majority amongst those who have subscirbed to the term deposit with technicians being the second majority.\n",
    "    - They are married \n",
    "    - They hold a university degree\n",
    "    - They do not hold a credit in default\n",
    "    - Housing loan doesn't seem a priority to check for since an equal number of customers who have and have not subscribed to it seem to have subscribed to the term deposit.\n",
    "    - Cell-phones should be the preferred mode of contact for contacting customers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Treating outliers in the continuous columns\n",
    "\n",
    "- Outliers can be treated in a variety of ways. It depends on the skewness of the feature.\n",
    "- To reduce right skewness, we use roots or logarithms or reciprocals (roots are weakest). This is the most common problem in practice.\n",
    "- To reduce left skewness, we take squares or cubes or higher powers.\n",
    "- But in our data, some of the features have negative values and also the value 0. In such cases, square root transform or logarithmic transformation cannot be used since we cannot take square root of negative values and logarithm of zero is not defined.\n",
    "- Hence for this data we use a method called **Winsorization**. In this method we define a confidence interval of let's say 90% and then replace all the outliers below the 5th percentile with the value at 5th percentile and all the values above 95th percentile with the value at the 95th percentile. It is pretty useful when there are negative values and zeros in the features which cannot be treated with log transforms or square roots. Do read up on it more [here](https://www.statisticshowto.datasciencecentral.com/winsorize/)\n",
    "\n",
    "Lets' write a function below that treats all the outliers in the numeric features using winsorization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Function to treat outliers \n",
    "def treat_outliers(dataframe):\n",
    "    cols = list(dataframe)\n",
    "    for col in cols:\n",
    "        if col in dataframe.select_dtypes(include=np.number).columns:\n",
    "            dataframe[col] = winsorize(dataframe[col], limits=[0.05, 0.1],inclusive=(True, True))\n",
    "    \n",
    "    return dataframe    \n",
    "\n",
    "\n",
    "#dataframe = treat_outliers(dataframe)\n",
    "\n",
    "# Checking for outliers after applying winsorization\n",
    "#detect_outliers(dataframe)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Observation :\n",
    "\n",
    "Using winsorization has resulted in removal of all the outliers from the numerical columns.  You can even use normalization or standardization for dealing with outliers. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Applying vanilla models on the data\n",
    "\n",
    "Since we have performed preprocessing on our data and also done with the EDA part, it is now time to apply vanilla machine learning models on the data and check their performance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Function to Label Encode Categorical variables\n",
    "\n",
    "Before applying our machine learning algorithm, we need to recollect that any algorithm can only read numerical values. It is therefore essential to encode categorical features into numerical values. Encoding of categorical variables can be performed in two ways:\n",
    "- Label Encoding\n",
    "- One-Hot Encoding.\n",
    "\n",
    "For the given dataset, we are going to label encode the categorical columns. \n",
    "\n",
    "- In the function below we will perform label encoding on all the categorical features and also the target (since it is categorical) in the  dataset. You can modify the below function in order to perform One-Hot Encoding as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "le = LabelEncoder()\n",
    "# Function that auto encodes any dataframe column of type category or object.\n",
    "def dummyEncode(dataset):\n",
    "        \n",
    "        columnsToEncode = list(dataset.select_dtypes(include=['category','object']))\n",
    "        le = LabelEncoder()\n",
    "        for feature in columnsToEncode:\n",
    "            try:\n",
    "                dataset[feature] = le.fit_transform(dataset[feature])\n",
    "            except:\n",
    "                print('Error encoding '+feature)\n",
    "        return dataset\n",
    "\n",
    "dataframe = dummyEncode(dataframe)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fit vanilla classification models\n",
    "\n",
    "Since we have label encoded our categorical variables, our data is now ready for applying machine learning algorithms. \n",
    "\n",
    "There are many Classification algorithms are present in machine learning, which are used for different classification applications. Some of the main classification algorithms are as follows-\n",
    "- Logistic Regression\n",
    "- DecisionTree Classifier\n",
    "- RandomForest Classfier\n",
    "- XGBClassifier\n",
    "- GradientBoostingClassifier\n",
    "\n",
    "The function we have written below takes the features, target and the classification model as the input parameters and internally splits them into training data and validation data. It then fits the classification model on the train data and then makes a prediction on the validation data and outputs the `roc_auc_score` and the `roc_curve` for this prediction.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.97      0.94      5798\n",
      "           1       0.63      0.33      0.43       792\n",
      "\n",
      "    accuracy                           0.90      6590\n",
      "   macro avg       0.77      0.65      0.69      6590\n",
      "weighted avg       0.88      0.90      0.88      6590\n",
      "\n",
      "ROC_AUC_SCORE is 0.6502296594785384\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC Score = 65.02 %\n",
      "On Model - \n",
      "Logistic Regression\n",
      "================================================================================\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.94      0.94      5798\n",
      "           1       0.53      0.54      0.54       792\n",
      "\n",
      "    accuracy                           0.89      6590\n",
      "   macro avg       0.74      0.74      0.74      6590\n",
      "weighted avg       0.89      0.89      0.89      6590\n",
      "\n",
      "ROC_AUC_SCORE is 0.7379495193396539\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC Score = 73.79 %\n",
      "On Model - \n",
      "Decision Tree\n",
      "================================================================================\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.96      0.95      5798\n",
      "           1       0.66      0.50      0.57       792\n",
      "\n",
      "    accuracy                           0.91      6590\n",
      "   macro avg       0.80      0.73      0.76      6590\n",
      "weighted avg       0.90      0.91      0.90      6590\n",
      "\n",
      "ROC_AUC_SCORE is 0.7309726272730757\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC Score = 73.10 %\n",
      "On Model - \n",
      "Random Forest\n",
      "================================================================================\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.96      0.95      5798\n",
      "           1       0.64      0.55      0.59       792\n",
      "\n",
      "    accuracy                           0.91      6590\n",
      "   macro avg       0.79      0.75      0.77      6590\n",
      "weighted avg       0.90      0.91      0.91      6590\n",
      "\n",
      "ROC_AUC_SCORE is 0.7534932369573625\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC Score = 75.35 %\n",
      "On Model - \n",
      "XGBoost\n",
      "================================================================================\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.96      0.95      5798\n",
      "           1       0.66      0.51      0.58       792\n",
      "\n",
      "    accuracy                           0.91      6590\n",
      "   macro avg       0.80      0.74      0.76      6590\n",
      "weighted avg       0.90      0.91      0.90      6590\n",
      "\n",
      "ROC_AUC_SCORE is 0.7382034383155459\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC Score = 73.82 %\n",
      "On Model - \n",
      "Gradient Boosting\n",
      "================================================================================\n"
     ]
    }
   ],
   "source": [
    "#from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "def run_model(predictors,target, model):\n",
    "    '''\n",
    "    Performs model training and tests using ROC-AUC \n",
    "    returns AUC score\n",
    "    '''\n",
    "    x_train,x_val,y_train,y_val = train_test_split(predictors,target,test_size=0.2,random_state=42)\n",
    "    model.fit(x_train, y_train)\n",
    "    y_scores = model.predict(x_val)\n",
    "    auc = roc_auc_score(y_val, y_scores)\n",
    "    print('Classification Report:')\n",
    "    print(classification_report(y_val,y_scores))\n",
    "    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_val, y_scores)\n",
    "    print('ROC_AUC_SCORE is',roc_auc_score(y_val, y_scores))\n",
    "    \n",
    "    #fpr, tpr, _ = roc_curve(y_test, predictions[:,1])\n",
    "    \n",
    "    plt.plot(false_positive_rate, true_positive_rate)\n",
    "    plt.xlabel('FPR')\n",
    "    plt.ylabel('TPR')\n",
    "    plt.title('ROC curve')\n",
    "    plt.show()\n",
    "    return auc\n",
    "\n",
    "# Predictors\n",
    "X = dataframe.iloc[:,:-1]\n",
    "\n",
    "# Target\n",
    "y = dataframe.iloc[:,-1]\n",
    "\n",
    "# Choosing the models. If you want to specify additional models, kindly specify them as a key-value pair as shown below.\n",
    "models = {'Logistic Regression':LogisticRegression,'Decision Tree':DecisionTreeClassifier,'Random Forest': RandomForestClassifier,'XGBoost':XGBClassifier,'Gradient Boosting':GradientBoostingClassifier}\n",
    "\n",
    "for i in models.items():\n",
    "    # run model\n",
    "    model = i[1]()\n",
    "    auc = run_model(X, y, model) # train and returns AUC test score\n",
    "    print('AUC Score = %.2f' %(auc*100) +' %\\nOn Model - \\n'+str(i[0]))\n",
    "    print('===='*20)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Selection \n",
    "\n",
    "Now that we have applied vanilla models on our data, we now have a basic understanding of what our predictions look like. Let's now use feature selection methods for identifying the best set of features for each model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Using RFE for feature selection\n",
    "In this task let's use Recursive Feature Elimination for selecting the best features. RFE is a wrapper method that uses the model to identify the best features. \n",
    "\n",
    "- The function  `feature selection` takes four parameters `predictors`, `target`, `model` and the `number_of_features`. The parameter `number_of_features` is used for explicitly stating the number of features you want to specify inside the RFE object. For the below task, we have inputted 8 feature. You can change this value and input the number of features you want to retain for your model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Features  to be selected for Logistic Regression are:\n",
      "['marital', 'contact', 'day_of_week', 'campaign', 'poutcome', 'emp.var.rate', 'cons.conf.idx', 'euribor3m']\n",
      "========================================================================================================================\n",
      "Features  to be selected for Random Forest are:\n",
      "['age', 'job', 'day_of_week', 'duration', 'campaign', 'cons.conf.idx', 'euribor3m', 'nr.employed']\n",
      "========================================================================================================================\n",
      "Features  to be selected for XGBoost are:\n",
      "['contact', 'month', 'duration', 'poutcome', 'emp.var.rate', 'cons.conf.idx', 'euribor3m', 'nr.employed']\n",
      "========================================================================================================================\n"
     ]
    }
   ],
   "source": [
    "def feature_selection(predictors,target,number_of_features,model):\n",
    "\n",
    "    models = model()\n",
    "    rfe = RFE(models,number_of_features)\n",
    "    rfe = rfe.fit(X,y)\n",
    "    feature_ranking = pd.Series(rfe.ranking_, index=X.columns)\n",
    "    plt.show()\n",
    "    print('Features  to be selected for {} are:'.format(str(i[0])))\n",
    "    print(feature_ranking[feature_ranking.values==1].index.tolist())\n",
    "    print('===='*30)\n",
    "\n",
    "# Choosing the models. If you want to specify additional models, kindly specify them as a key-value pair as shown below.\n",
    "models = {'Logistic Regression':LogisticRegression,'Random Forest':RandomForestClassifier,'XGBoost':XGBClassifier}\n",
    "\n",
    "# Selecting 8 number of features\n",
    "for i in models.items():\n",
    "    feature_selection(X,y,8,i[1])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Selection using Random Forest\n",
    "\n",
    "Random Forests are often used for feature selection in a data science workflow. This is because the tree based strategies that random forests use, rank the features based on how well they improve the purity of the node. The nodes having a very low impurity get split at the start of the tree while the nodes having a very high impurity get split towards the end of the tree. Hence by pruning the tree after desired amount of splits, we can create a subset of the most important features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def rfc_feature_selection(dataset,target):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(dataset, target, test_size=0.3, random_state=42, stratify=target)\n",
    "    rfc = RandomForestClassifier(random_state=42)\n",
    "    rfc.fit(X_train, y_train)\n",
    "    y_pred = rfc.predict(X_test)\n",
    "    rfc_importances = pd.Series(rfc.feature_importances_, index=dataset.columns).sort_values().tail(10)\n",
    "    rfc_importances.plot(kind='bar')\n",
    "    plt.show()\n",
    "\n",
    "rfc_feature_selection(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Observations :\n",
    "\n",
    "We can test the features obtained from both the feature selection techniques by inserting these features to the model and depending on which set of features perform better, we can retain them for the model. \n",
    "\n",
    "__The Feature Selection techniques can differ from problem to problem and the techniques applied for this problem may or may not work for the other problems. In those cases, feel free to try out other methods like PCA, SelectKBest(), SelectPercentile(), tSNE etc.__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Grid-Search & Hyperparameter Tuning \n",
    "\n",
    "Hyperparameters are function attributes that we have to specify for an algorithm. By now, you should be knowing that grid search is done to find out the best set of hyperparameters for your model.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Grid Search for Random Forest\n",
    "\n",
    "In the below task, we write a function that performs hyperparameter tuning for a random forest classifier. We have used the hyperparameters `max_features`, `max_depth` and `criterion` for this task. Feel free to play around with this function by introducing a few more hyperparameters and chaniging their values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters are:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'criterion': 'gini', 'max_depth': 8, 'max_features': 'sqrt'}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def grid_search_random_forrest(dataframe,target):\n",
    "\n",
    "    x_train,x_val,y_train,y_val = train_test_split(X,y, test_size=0.3, random_state=42, stratify=y)\n",
    "    rfc = RandomForestClassifier()\n",
    "    param_grid = { \n",
    "    'max_features': ['auto', 'sqrt', 'log2'],\n",
    "    'max_depth' : [4,5,6,7,8],\n",
    "    'criterion' :['gini', 'entropy']\n",
    "    }\n",
    "    grid_search_model = GridSearchCV(rfc, param_grid=param_grid)\n",
    "    grid_search_model.fit(x_train, y_train)\n",
    "    print('Best Parameters are:')\n",
    "    return grid_search_model.best_params_\n",
    "\n",
    "\n",
    "grid_search_random_forrest(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Applying the best parameters obtained using Grid Search on Random Forest model\n",
    "\n",
    "In the task below, we fit a random forest model using the best parameters obtained using Grid Search. Since the target is imbalanced, we apply Synthetic Minority Oversampling (SMOTE) for undersampling and oversampling the majority and minority classes in the target respectively. \n",
    "\n",
    "__Kindly note that SMOTE should always be applied only on the training data and not on the validation and test data.__\n",
    "\n",
    "You can try experimenting with and without SMOTE and check for the difference in recall. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "On Validation data\n",
      "ROC_AUC_SCORE is 0.8559402280516245\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.87      0.92      8723\n",
      "           1       0.46      0.84      0.60      1162\n",
      "\n",
      "    accuracy                           0.87      9885\n",
      "   macro avg       0.72      0.86      0.76      9885\n",
      "weighted avg       0.92      0.87      0.88      9885\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score,roc_curve,classification_report\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "\n",
    "def grid_search_random_forrest_best(dataframe,target):\n",
    "    \n",
    "    \n",
    "    x_train,x_val,y_train,y_val = train_test_split(dataframe,target, test_size=0.3, random_state=42)\n",
    "    \n",
    "    # Applying Smote on train data for dealing with class imbalance\n",
    "    smote = SMOTE()\n",
    "    X_sm, y_sm =  smote.fit_sample(x_train, y_train)\n",
    "    \n",
    "    \n",
    "    rfc = RandomForestClassifier(n_estimators=11, max_features='auto', max_depth=8, criterion='entropy',random_state=42)\n",
    "    rfc.fit(X_sm, y_sm)\n",
    "    y_pred = rfc.predict(x_val)\n",
    "\n",
    "    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_val, y_pred)\n",
    "    print('On Validation data')\n",
    "    print('ROC_AUC_SCORE is',roc_auc_score(y_val, y_pred))\n",
    "    print(classification_report(y_val, y_pred))\n",
    "    #fpr, tpr, _ = roc_curve(y_test, predictions[:,1])\n",
    "    plt.clf()\n",
    "    plt.plot(false_positive_rate, true_positive_rate)\n",
    "    plt.xlabel('FPR')\n",
    "    plt.ylabel('TPR')\n",
    "    plt.title('ROC curve')\n",
    "    plt.show()\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "grid_search_random_forrest_best(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: imblearn in c:\\users\\my\\anaconda3\\lib\\site-packages (0.0)\n",
      "Requirement already satisfied: imbalanced-learn in c:\\users\\my\\anaconda3\\lib\\site-packages (from imblearn) (0.6.2)\n",
      "Requirement already satisfied: numpy>=1.11 in c:\\users\\my\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (1.18.1)\n",
      "Requirement already satisfied: scipy>=0.17 in c:\\users\\my\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (1.4.1)\n",
      "Requirement already satisfied: scikit-learn>=0.22 in c:\\users\\my\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (0.22.1)\n",
      "Requirement already satisfied: joblib>=0.11 in c:\\users\\my\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (0.14.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install imblearn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Applying the grid search function for random forest only on the best features obtained using RFE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "On Validation data\n",
      "ROC_AUC_SCORE is 0.8687760491532958\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.84      0.91      8723\n",
      "           1       0.43      0.90      0.58      1162\n",
      "\n",
      "    accuracy                           0.85      9885\n",
      "   macro avg       0.71      0.87      0.74      9885\n",
      "weighted avg       0.92      0.85      0.87      9885\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grid_search_random_forrest_best(X[['duration','euribor3m','age','nr.employed','job','day_of_week','campaign','education','emp.var.rate','poutcome']],y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Applying the grid search function for random forest only on the best features obtained using Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "On Validation data\n",
      "ROC_AUC_SCORE is 0.8667997023714976\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.84      0.90      8723\n",
      "           1       0.42      0.90      0.57      1162\n",
      "\n",
      "    accuracy                           0.84      9885\n",
      "   macro avg       0.70      0.87      0.74      9885\n",
      "weighted avg       0.92      0.84      0.86      9885\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grid_search_random_forrest_best(X[['duration','euribor3m','age','nr.employed','job','day_of_week','campaign','education','marital','poutcome']],y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using Grid Search for Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "On Validation Data\n",
      "ROC_AUC_SCORE is  0.8499900257751334\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.83      0.90      8723\n",
      "           1       0.41      0.87      0.56      1162\n",
      "\n",
      "    accuracy                           0.84      9885\n",
      "   macro avg       0.69      0.85      0.73      9885\n",
      "weighted avg       0.91      0.84      0.86      9885\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def grid_search_log_reg(dataframe,target):\n",
    "    \n",
    "    \n",
    "    x_train,x_val,y_train,y_val = train_test_split(dataframe, target, test_size=0.3, random_state=42)\n",
    "\n",
    "    smote = SMOTE()\n",
    "    X_sm, y_sm =  smote.fit_sample(x_train, y_train)\n",
    "    \n",
    "    \n",
    "    log_reg = LogisticRegression()\n",
    "    \n",
    "    param_grid = { \n",
    "        'C' : np.logspace(-5, 8, 15)\n",
    "    }\n",
    "    grid_search = GridSearchCV(log_reg, param_grid=param_grid)\n",
    "    \n",
    "    grid_search.fit(X_sm, y_sm)\n",
    "    y_pred = grid_search.predict(x_val)\n",
    "    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_val, y_pred)\n",
    "    print('On Validation Data')\n",
    "    print('ROC_AUC_SCORE is ',roc_auc_score(y_val, y_pred))\n",
    "    print(classification_report(y_val, y_pred))\n",
    "    plt.clf()\n",
    "    plt.plot(false_positive_rate, true_positive_rate)\n",
    "    plt.xlabel('FPR')\n",
    "    plt.ylabel('TPR')\n",
    "    plt.title('ROC curve')\n",
    "    plt.show()\n",
    "    \n",
    "\n",
    "grid_search_log_reg(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Applying XGBoost model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "On Validation Data\n",
      "ROC_AUC_SCORE is  0.8221912395327367\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.90      0.93      8723\n",
      "           1       0.50      0.74      0.60      1162\n",
      "\n",
      "    accuracy                           0.88      9885\n",
      "   macro avg       0.73      0.82      0.76      9885\n",
      "weighted avg       0.91      0.88      0.89      9885\n",
      "\n",
      "[[7858  865]\n",
      " [ 298  864]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def xgboost(dataframe,target):\n",
    "    X = dataframe\n",
    "    y = target\n",
    "\n",
    "    x_train,x_val,y_train,y_val = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "    smote = SMOTE()\n",
    "    X_sm, y_sm =  smote.fit_sample(x_train, y_train)\n",
    "\n",
    "    model = XGBClassifier(n_estimators=50, max_depth=4)\n",
    "    model.fit(pd.DataFrame(X_sm,columns=x_train.columns), y_sm)\n",
    "    y_pred = model.predict(x_val)\n",
    "    \n",
    "    print('On Validation Data')\n",
    "    print('ROC_AUC_SCORE is ', roc_auc_score(y_val, y_pred))\n",
    "    print('Classification Report:')\n",
    "    print(classification_report(y_val, y_pred))\n",
    "    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_val, y_pred)\n",
    "    #     print(auc(false_positive_rate, true_positive_rate))\n",
    "    \n",
    "    \n",
    "    plt.clf()\n",
    "    plt.plot(false_positive_rate, true_positive_rate)\n",
    "    print(confusion_matrix(y_val,y_pred))\n",
    "    plt.xlabel('FPR')\n",
    "    plt.ylabel('TPR')\n",
    "    plt.title('ROC curve')\n",
    "    plt.show()\n",
    "    \n",
    "xgboost(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ensembling\n",
    "\n",
    "Ensemble learning uses multiple machine learning models  to obtain better predictive performance than could be obtained from any of the constituent learning algorithms alone. In the below task, we have used an ensemble of three models - `RandomForestClassifier()`, `GradientBoostingClassifier()`, `LogisticRegression()`. Feel free to modify this function as per your requirements and fit more models or change the parameters for every model.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "On Validation Data\n",
      "AUC_ROC_SCORE is  0.8530616134803376\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.89      0.93      8723\n",
      "           1       0.50      0.81      0.62      1162\n",
      "\n",
      "    accuracy                           0.88      9885\n",
      "   macro avg       0.74      0.85      0.78      9885\n",
      "weighted avg       0.92      0.88      0.89      9885\n",
      "\n",
      "[[7781  942]\n",
      " [ 216  946]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.ensemble import VotingClassifier\n",
    "\n",
    "\n",
    "def ensemble_func2(dataframe,target):\n",
    "    \n",
    "    x_train,x_val,y_train,y_val = train_test_split(dataframe, target, test_size=0.3, random_state=42)\n",
    "\n",
    "    smote = SMOTE()\n",
    "    X_sm, y_sm =  smote.fit_sample(x_train, y_train)\n",
    "    \n",
    "    \n",
    "    model1 = RandomForestClassifier()\n",
    "    model3 = GradientBoostingClassifier()\n",
    "    model2 = LogisticRegression()\n",
    "    \n",
    "    model = VotingClassifier(estimators=[('rf', model1), ('lr', model2), ('xgb',model3)], voting='soft')\n",
    "    model.fit(X_sm,y_sm)\n",
    "    y_pred = model.predict(x_val)\n",
    "    model.score(x_val,y_val)\n",
    "\n",
    "        \n",
    "    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_val, y_pred)\n",
    "    print('On Validation Data')\n",
    "    print('AUC_ROC_SCORE is ',roc_auc_score(y_val, y_pred))\n",
    "    print('Classification Report:')\n",
    "    print(classification_report(y_val, y_pred))\n",
    "    print(confusion_matrix(y_val, y_pred))\n",
    "    \n",
    "    plt.clf()\n",
    "    plt.plot(false_positive_rate, true_positive_rate)\n",
    "    plt.xlabel('FPR')\n",
    "    plt.ylabel('TPR')\n",
    "    plt.title('ROC curve')\n",
    "    plt.show()\n",
    "    \n",
    "ensemble_func2(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction on the test data\n",
    "\n",
    "In the below task, we have performed a prediction on the test data. We have used Logistic Regression for this prediction. You can use the model of your choice that will give you the best metric score on the validation data. \n",
    "\n",
    "In this task below, we will read the test file and store the `Id` column from the test file in a variable `Id`. This column would be of use to us while submission since we need to have an Id column in the submission file which is the same Id of the observations in the test data.\n",
    "\n",
    "We have to perform the same preprocessing operations on the test data that we have performed on the train data. For demonstration purposes, we have preprocessed the test data and this preprocessed data is present in the csv file `test_preprocessed.csv`\n",
    "\n",
    "We then make a prediction on the preprocessed test data using the Grid Search Logisitic regression model. And as the final step, we concatenate this prediction with the `Id` column and then convert this into a csv file which becomes the `submission.csv` "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>month</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>emp.var.rate</th>\n",
       "      <th>cons.price.idx</th>\n",
       "      <th>cons.conf.idx</th>\n",
       "      <th>euribor3m</th>\n",
       "      <th>nr.employed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>32</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>131</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1.4</td>\n",
       "      <td>93.918</td>\n",
       "      <td>-42.7</td>\n",
       "      <td>4.961</td>\n",
       "      <td>5228.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-2.9</td>\n",
       "      <td>92.963</td>\n",
       "      <td>-40.8</td>\n",
       "      <td>1.262</td>\n",
       "      <td>5076.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>55</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>131</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.7</td>\n",
       "      <td>94.215</td>\n",
       "      <td>-40.3</td>\n",
       "      <td>0.810</td>\n",
       "      <td>5017.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>44</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>48</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1.4</td>\n",
       "      <td>94.465</td>\n",
       "      <td>-41.8</td>\n",
       "      <td>4.961</td>\n",
       "      <td>5228.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>144</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.8</td>\n",
       "      <td>92.843</td>\n",
       "      <td>-47.1</td>\n",
       "      <td>1.531</td>\n",
       "      <td>5099.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  job  marital  education  default  housing  loan  contact  month  \\\n",
       "0   32    4        0          6        0        0     0        0      3   \n",
       "1   37   10        3          6        0        0     0        0      4   \n",
       "2   55    5        0          5        1        2     0        0      3   \n",
       "3   44    2        1          0        1        0     0        1      4   \n",
       "4   28    0        2          3        0        0     0        0      5   \n",
       "\n",
       "   day_of_week  duration  campaign  poutcome  emp.var.rate  cons.price.idx  \\\n",
       "0            3       131         5         1           1.4          93.918   \n",
       "1            3       100         1         1          -2.9          92.963   \n",
       "2            2       131         2         1          -1.7          94.215   \n",
       "3            3        48         2         1           1.4          94.465   \n",
       "4            0       144         2         1          -1.8          92.843   \n",
       "\n",
       "   cons.conf.idx  euribor3m  nr.employed  \n",
       "0          -42.7      4.961       5228.1  \n",
       "1          -40.8      1.262       5076.2  \n",
       "2          -40.3      0.810       5017.5  \n",
       "3          -41.8      4.961       5228.1  \n",
       "4          -47.1      1.531       5099.1  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Actual Test File\n",
    "test = pd.read_csv('test.csv')\n",
    "\n",
    "# Storing the Id column\n",
    "Id = test[['Id']]\n",
    "\n",
    "# Preprocessed Test File\n",
    "test = pd.read_csv('test_preprocessed.csv')\n",
    "test.drop('Id',1,inplace=True)\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def grid_search_log_reg(dataframe,target):\n",
    "\n",
    "\n",
    "    x_train,x_val,y_train,y_val = train_test_split(dataframe, target, test_size=0.3, random_state=42)\n",
    "\n",
    "    smote = SMOTE()\n",
    "    X_sm, y_sm =  smote.fit_sample(x_train, y_train)\n",
    "\n",
    "\n",
    "    log_reg = LogisticRegression()\n",
    "\n",
    "    param_grid = { \n",
    "        'C' : np.logspace(-5, 8, 15)\n",
    "    }\n",
    "    grid_search = GridSearchCV(log_reg, param_grid=param_grid)\n",
    "\n",
    "    grid_search.fit(X_sm, y_sm)\n",
    "    \n",
    "    # Predict on the preprocessed test file\n",
    "    y_pred = grid_search.predict(test)\n",
    "    return y_pred\n",
    "\n",
    "    \n",
    "prediction = pd.DataFrame(grid_search_log_reg(X,y),columns=['y'])\n",
    "submission = pd.concat([Id,prediction['y']],1)\n",
    "\n",
    "submission.to_csv('submission.csv',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14455</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>36380</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>40076</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10778</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27939</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id  y\n",
       "0  14455  0\n",
       "1  36380  0\n",
       "2  40076  1\n",
       "3  10778  0\n",
       "4  27939  0"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test = pd.read_csv('submission.csv')\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
